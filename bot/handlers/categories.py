# bot/handlers/categories.py
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest
from asgiref.sync import sync_to_async
from django_app.shop.models import Category, Product, TelegramUser
from bot.handlers.cart import get_cart_total, get_cart_quantity

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
CATEGORIES_PER_PAGE = 5
PRODUCTS_PER_PAGE = 5

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

@sync_to_async
def get_categories(parent_id: str, page: int) -> tuple[str, list[Category], int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: parent_id={parent_id}, page={page}")

    if parent_id == "root":
        categories = Category.objects.filter(parent__isnull=True, is_active=True)
    else:
        categories = Category.objects.filter(parent_id=parent_id, is_active=True)

    total_categories = categories.count()
    total_pages = (total_categories + CATEGORIES_PER_PAGE - 1) // CATEGORIES_PER_PAGE
    start = (page - 1) * CATEGORIES_PER_PAGE
    end = start + CATEGORIES_PER_PAGE
    categories_on_page = list(categories[start:end])

    if not categories_on_page:
        return "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", [], 0

    if parent_id == "root":
        text = "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    else:
        parent = Category.objects.get(id=parent_id)
        text = f"üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ > {parent.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"

    return text, categories_on_page, total_pages

@sync_to_async
def get_products_page(category_id: int, page: int, per_page: int = PRODUCTS_PER_PAGE) -> tuple[list[Product], int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    qs = Product.objects.filter(category_id=category_id, is_active=True)
    total_count = qs.count()
    start = (page - 1) * per_page
    end = start + per_page
    products = list(qs[start:end])
    return products, total_count

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup: InlineKeyboardMarkup):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (—É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ): {text[:50]}...")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å —Ñ–æ—Ç–æ) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
                await callback.message.answer(
                    text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            except Exception as delete_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")
                await callback.message.answer(
                    text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
            await callback.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except Exception as delete_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")
            await callback.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )

async def get_products_keyboard(category_id: int, page: int, products: list[Product], total_count: int, user: TelegramUser) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤"""
    buttons = [[InlineKeyboardButton(text=prod.name, callback_data=f"product_{prod.id}")] for prod in products]
    max_page = (total_count + PRODUCTS_PER_PAGE - 1) // PRODUCTS_PER_PAGE

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if max_page > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prod_page_{category_id}_{page - 1}"))
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{max_page}", callback_data="noop"))
        if page < max_page:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"prod_page_{category_id}_{page + 1}"))
        buttons.append(nav_buttons)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
    cart_quantity = await get_cart_quantity(user)
    cart_total = await get_cart_total(user)

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç"
    buttons.append([
        InlineKeyboardButton(text="üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list_1")
    ])

    # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞: {cart_total} ‚ÇΩ ({cart_quantity} —à—Ç.)" if cart_quantity > 0 else "üõí –ö–æ—Ä–∑–∏–Ω–∞: –ø—É—Å—Ç–∞"
    buttons.append([
        InlineKeyboardButton(text=cart_text, callback_data="cart")
    ])

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í –º–µ–Ω—é"
    category = await sync_to_async(Category.objects.get)(id=category_id)
    parent_id = category.parent_id
    back_callback = f"cat_page_{parent_id or 'root'}_1"
    buttons.append([
        InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data=back_callback),
        InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.message(F.text == "/catalog")
async def catalog_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞.
    """
    try:
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /catalog.")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        text, categories, total_pages = await get_categories("root", 1)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
        user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
            telegram_id=user_id,
            defaults={
                'first_name': message.from_user.first_name,
                'is_active': True
            }
        )
        cart_quantity = await get_cart_quantity(user)
        cart_total = await get_cart_total(user)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category in categories:
            buttons.append([
                InlineKeyboardButton(
                    text=category.name,
                    callback_data=f"cat_page_{category.id}_{1}"
                )
            ])

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        if total_pages > 1:
            pagination_buttons = []
            pagination_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"cat_page_root_0")
            )
            pagination_buttons.append(
                InlineKeyboardButton(text=f"1/{total_pages}", callback_data="noop")
            )
            pagination_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"cat_page_root_2")
            )
            buttons.append(pagination_buttons)

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç"
        buttons.append([
            InlineKeyboardButton(text="üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list_1")
        ])

        # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞: {cart_total} ‚ÇΩ ({cart_quantity} —à—Ç.)" if cart_quantity > 0 else "üõí –ö–æ—Ä–∑–∏–Ω–∞: –ø—É—Å—Ç–∞"
        buttons.append([
            InlineKeyboardButton(text=cart_text, callback_data="cart")
        ])

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏ "–í –º–µ–Ω—é"
        buttons.append([
            InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu"),
            InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /catalog: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")

@router.callback_query(F.data.startswith("cat_page_"))
async def categories_pagination(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data (—Ñ–æ—Ä–º–∞—Ç: "cat_page_<parent_id>_<page>")
        parts = callback.data.split("_")
        if len(parts) == 4:
            parent_id = parts[2]  # –ù–∞–ø—Ä–∏–º–µ—Ä, "root" –∏–ª–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            page = int(parts[3])
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ñ–æ—Ä–º–∞—Ç–æ–º "cat_page_<page>"
            parent_id = "root"
            page = int(parts[2])

        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, parent_id={parent_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        text, categories, total_pages = await get_categories(parent_id, page)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
        user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
            telegram_id=user_id,
            defaults={
                'first_name': callback.from_user.first_name,
                'is_active': True
            }
        )
        cart_quantity = await get_cart_quantity(user)
        cart_total = await get_cart_total(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if parent_id != "root":
            subcat_text, subcategories, subcat_count = await get_categories(parent_id, 1)
            if subcategories:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                text = subcat_text
                categories = subcategories
                total_pages = subcat_count
            else:
                # –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                products, total_count = await get_products_page(int(parent_id), page)
                if products:
                    kb = await get_products_keyboard(int(parent_id), page, products, total_count, user)
                    await safe_edit_message(callback, "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", kb)
                    await callback.answer()
                    return
                else:
                    text = "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category in categories:
            buttons.append([
                InlineKeyboardButton(
                    text=category.name,
                    callback_data=f"cat_page_{category.id}_{1}"
                )
            ])

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        if total_pages > 1:
            pagination_buttons = []
            if page > 1:
                pagination_buttons.append(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"cat_page_{parent_id}_{page - 1}")
                )
            pagination_buttons.append(
                InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
            )
            if page < total_pages:
                pagination_buttons.append(
                    InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"cat_page_{parent_id}_{page + 1}")
                )
            buttons.append(pagination_buttons)

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç"
        buttons.append([
            InlineKeyboardButton(text="üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list_1")
        ])

        # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞: {cart_total} ‚ÇΩ ({cart_quantity} —à—Ç.)" if cart_quantity > 0 else "üõí –ö–æ—Ä–∑–∏–Ω–∞: –ø—É—Å—Ç–∞"
        buttons.append([
            InlineKeyboardButton(text=cart_text, callback_data="cart")
        ])

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏ "–í –º–µ–Ω—é"
        if parent_id == "root":
            back_callback = "main_menu"
        else:
            parent_category = await sync_to_async(Category.objects.get)(id=parent_id)
            back_callback = "main_menu" if parent_category.parent is None else f"cat_page_{parent_category.parent.id}_1"
        buttons.append([
            InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data=back_callback),
            InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_edit_message(callback, text, keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)
    finally:
        await callback.answer()

@router.callback_query(F.data.startswith("prod_page_"))
async def products_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤.")
    try:
        _, _, category_id, page = callback.data.split("_")
        category_id = int(category_id)
        page = int(page)
        logger.debug(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è category_id {category_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")
    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {callback.data} - {e}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)
        return

    user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
        telegram_id=callback.from_user.id,
        defaults={
            'first_name': callback.from_user.first_name,
            'is_active': True
        }
    )
    products, total_count = await get_products_page(category_id, page)

    if not products:
        logger.warning(f"–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID {category_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")
        await callback.answer("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    kb = await get_products_keyboard(category_id, page, products, total_count, user)
    await safe_edit_message(callback, "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", kb)
    await callback.answer()
    logger.info(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è category_id {category_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")
