import os
import django
import logging
import re
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from dotenv import load_dotenv

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup

from aiogram.utils.text_decorations import html_decoration as html

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
SUPPORT_TELEGRAM = os.getenv("SUPPORT_TELEGRAM")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

class OrderState(StatesGroup):
    waiting_for_address = State()
    waiting_for_phone = State()
    waiting_for_wishes = State()
    waiting_for_delivery_time = State()
    waiting_for_confirmation = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_app.config.settings")
django.setup()

# --- –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Django ORM ---

def _get_or_create_user_sync(tg_id: int):
    from django_app.shop.models import TelegramUser
    return TelegramUser.objects.get_or_create(
        telegram_id=tg_id,
        defaults={'is_active': True}
    )

def _get_cart_sync(user):
    from django_app.shop.models import Cart
    return Cart.objects.get_or_create(
        user=user,
        is_active=True
    )

def _get_cart_items_sync(user):
    from django_app.shop.models import CartItem
    return list(CartItem.objects.filter(
        cart__user=user,
        cart__is_active=True,
        is_active=True
    ).select_related("product").select_related("cart"))

def _remove_item_from_cart_sync(user, product_id):
    from django_app.shop.models import Cart, CartItem
    cart = Cart.objects.get(user=user, is_active=True)
    items = CartItem.objects.filter(cart=cart, product_id=product_id, is_active=True)
    for item in items:
        item.is_active = False
        item.save()
    
    if not CartItem.objects.filter(cart=cart, is_active=True).exists():
        cart.is_active = False
        cart.save()

def _create_order_sync(user_id, address, phone, wishes=None, desired_delivery_time=None):
    from django_app.shop.models import Cart, Order, OrderItem, TelegramUser
    user = TelegramUser.objects.get(telegram_id=user_id)
    cart = Cart.objects.get(user=user, is_active=True)
    
    # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    total = sum(
        item.product.price * item.quantity 
        for item in cart.items.filter(is_active=True)
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order = Order.objects.create(
        user=user,
        address=address,
        phone=phone,
        wishes=wishes,
        desired_delivery_time=desired_delivery_time,
        total=total
    )
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
    for cart_item in cart.items.filter(is_active=True):
        OrderItem.objects.create(
            order=order,
            product=cart_item.product,
            quantity=cart_item.quantity
        )
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart.is_active = False
    cart.save()
    
    return order

def _get_cart_quantity_sync(user):
    from django_app.shop.models import Cart
    cart = Cart.objects.filter(user=user, is_active=True).first()
    if cart:
        return sum(item.quantity for item in cart.items.filter(is_active=True))
    return 0

def _get_cart_total_sync(user):
    from django_app.shop.models import Cart
    cart = Cart.objects.filter(user=user, is_active=True).first()
    if cart:
        return sum(
            item.product.price * item.quantity 
            for item in cart.items.filter(is_active=True)
        )
    return 0

def _get_cart_details_sync(cart_id):
    from django_app.shop.models import Cart, CartItem
    cart = Cart.objects.get(id=cart_id)
    items = CartItem.objects.filter(cart=cart, is_active=True).select_related('product')
    items_text = "\n".join(
        f"‚Ä¢ {html.quote(item.product.name)} - {item.quantity} —à—Ç. √ó {html.quote(str(item.product.price))}‚ÇΩ"
        for item in items
    )
    total = sum(item.product.price * item.quantity for item in items)
    return items_text, total

def _get_order_details_sync(order_id):
    from django_app.shop.models import OrderItem
    items = OrderItem.objects.filter(order_id=order_id).select_related('product')
    items_text = "\n".join(
        f"‚Ä¢ {html.quote(item.product.name)} - {item.quantity} —à—Ç. √ó {html.quote(str(item.product.price))}‚ÇΩ"
        for item in items
    )
    total = sum(item.product.price * item.quantity for item in items)
    return items_text, total

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ---

@sync_to_async
def get_or_create_user(tg_id: int):
    return _get_or_create_user_sync(tg_id)

@sync_to_async
def get_cart(user):
    return _get_cart_sync(user)

@sync_to_async
def get_cart_items(user):
    return _get_cart_items_sync(user)

@sync_to_async
def remove_item_from_cart(user, product_id):
    return _remove_item_from_cart_sync(user, product_id)

@sync_to_async
def create_order(user_id, address, phone, wishes=None, desired_delivery_time=None):
    return _create_order_sync(user_id, address, phone, wishes, desired_delivery_time)

@sync_to_async
def get_cart_quantity(user):
    return _get_cart_quantity_sync(user)

@sync_to_async
def get_cart_total(user):
    return _get_cart_total_sync(user)

@sync_to_async
def get_cart_details(cart_id):
    return _get_cart_details_sync(cart_id)

@sync_to_async
def get_order_details(order_id):
    return _get_order_details_sync(order_id)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---

def generate_cart_keyboard(items):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"‚ùå {item.product.name} x{item.quantity}",
                callback_data=f"remove_item_{item.product.id}"
            )
        ]
        for item in items
    ])

    if items:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        ])

    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu")
    ])

    return keyboard

def generate_skip_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ])

def generate_cancel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def generate_confirmation_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")
        ],
        [
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def show_cart(user, message: Message | CallbackQuery):
    items = await get_cart_items(user)

    if not items:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        if isinstance(message, Message):
            await message.answer(text, reply_markup=kb)
        else:
            await message.message.edit_text(text, reply_markup=kb)
        return

    items_text, total = await get_cart_details(items[0].cart.id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: get_order_details -> get_cart_details
    text = (
        html.bold("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:") + "\n\n" +
        items_text +
        "\n\n" +
        html.bold(f"–ò—Ç–æ–≥–æ: {total} ‚ÇΩ")
    )

    kb = generate_cart_keyboard(items)
    
    try:
        if isinstance(message, Message):
            await message.answer(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        else:
            await message.message.edit_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await message.answer(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@router.callback_query(F.data == "cart")
@router.message(F.text == "/cart")
async def handle_cart(request: Message | CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã "–ö–æ—Ä–∑–∏–Ω–∞".
    """
    user, _ = await get_or_create_user(request.from_user.id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user.telegram_id}")
    
    items = await get_cart_items(user)

    if not items:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        if isinstance(request, Message):
            await request.answer(text, reply_markup=kb)
        else:
            try:
                await request.message.edit_text(text, reply_markup=kb)
            except TelegramBadRequest:
                await request.message.answer(text, reply_markup=kb)
        return

    total = sum(item.product.price * item.quantity for item in items)
    text = (
        html.bold("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:") + "\n\n" +
        "\n".join(
            f"‚Ä¢ {html.quote(item.product.name)} - {item.quantity} —à—Ç. √ó {html.quote(str(item.product.price))}‚ÇΩ"
            for item in items
        ) +
        "\n\n" +
        html.bold(f"–ò—Ç–æ–≥–æ: {total} ‚ÇΩ")
    )

    kb = generate_cart_keyboard(items)
    
    try:
        if isinstance(request, Message):
            await request.answer(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        else:
            try:
                await request.message.edit_text(
                    text,
                    reply_markup=kb,
                    parse_mode=ParseMode.HTML
                )
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    await request.message.answer(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await request.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")

@router.callback_query(F.data.startswith("remove_item_"))
async def remove_item(callback: CallbackQuery):
    user, _ = await get_or_create_user(callback.from_user.id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂
    product_id = int(callback.data.split("_")[-1])
    
    await remove_item_from_cart(user, product_id)
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    await show_cart(user, callback)

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass

    msg = await callback.message.answer(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=generate_cancel_keyboard()
    )

    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_address)

@router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=data.get("message_id"))
    except:
        pass

    msg = await message.answer(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=generate_cancel_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_phone)

@router.message(OrderState.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    if not re.match(r'^\+?\d{10,15}$', message.text.strip()):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(phone=message.text.strip())
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=data.get("message_id"))
    except:
        pass

    msg = await message.answer(
        "üí¨ –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=generate_skip_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_wishes)

@router.message(OrderState.waiting_for_wishes)
@router.callback_query(F.data == "skip", OrderState.waiting_for_wishes)
async def process_wishes(request: Message | CallbackQuery, state: FSMContext):
    wishes = request.text.strip() if isinstance(request, Message) else None
    await state.update_data(wishes=wishes)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    try:
        if isinstance(request, Message):
            await request.bot.delete_message(chat_id=request.chat.id, message_id=data.get("message_id"))
        else:
            await request.message.delete()
    except:
        pass

    msg = await (request.message if isinstance(request, CallbackQuery) else request).answer(
        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=generate_skip_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_delivery_time)

@router.message(OrderState.waiting_for_delivery_time)
@router.callback_query(F.data == "skip", OrderState.waiting_for_delivery_time)
async def process_delivery_time(request: Message | CallbackQuery, state: FSMContext):
    delivery_time = request.text.strip() if isinstance(request, Message) else None
    await state.update_data(desired_delivery_time=delivery_time)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    user, _ = await get_or_create_user(request.from_user.id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂
    cart, _ = await get_cart(user)
    items_text, total = await get_cart_details(cart.id)

    text = (
        f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
        f"üìç –ê–¥—Ä–µ—Å: {html.quote(data.get('address'))}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {html.quote(data.get('phone'))}\n"
        f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {html.quote(data.get('wishes')) if data.get('wishes') else '–ù–µ—Ç'}\n"
        f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {html.quote(delivery_time) if delivery_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n\n"
        f"üíµ –ò—Ç–æ–≥–æ: {html.bold(f'{total} ‚ÇΩ')}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if isinstance(request, Message):
            await request.bot.delete_message(chat_id=request.chat.id, message_id=data.get("message_id"))
        else:
            await request.message.delete()
    except:
        pass

    msg = await (request.message if isinstance(request, CallbackQuery) else request).answer(
        text,
        reply_markup=generate_confirmation_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_confirmation)

@router.callback_query(F.data == "confirm", OrderState.waiting_for_confirmation)
async def confirm_order(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user, _ = await get_or_create_user(callback.from_user.id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = await create_order(
            user_id=user.telegram_id,
            address=data.get("address"),
            phone=data.get("phone"),
            wishes=data.get("wishes"),
            desired_delivery_time=data.get("desired_delivery_time")
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        items_text, total = await get_order_details(order.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_text = (
            f"‚úÖ –ó–∞–∫–∞–∑ {html.bold(f'#{order.id}')} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üìç –ê–¥—Ä–µ—Å: {html.quote(data.get('address'))}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {html.quote(data.get('phone'))}\n"
            f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {html.quote(data.get('wishes')) if data.get('wishes') else '–ù–µ—Ç'}\n"
            f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {html.quote(data.get('desired_delivery_time')) if data.get('desired_delivery_time') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n\n"
            f"üíµ –ò—Ç–æ–≥–æ: {html.bold(f'{total} ‚ÇΩ')}"
        )

        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(
            user_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode=ParseMode.HTML
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if SUPPORT_TELEGRAM:
            admin_text = (
                f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
                f"üìç –ê–¥—Ä–µ—Å: {data.get('address')}\n"
                f"üõí –¢–æ–≤–∞—Ä—ã:\n{items_text}\n"
                f"üíµ –°—É–º–º–∞: {total}‚ÇΩ"
            )
            try:
                await bot.send_message(
                    chat_id=SUPPORT_TELEGRAM,
                    text=admin_text,
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
            ]))
    
    await state.clear()
