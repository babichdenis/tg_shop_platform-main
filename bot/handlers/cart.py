# bot/handlers/cart.py
import logging
from typing import List, Optional, Tuple

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
)

from asgiref.sync import sync_to_async
from django_app.shop.models import Cart, CartItem, Order, TelegramUser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---

class OrderStates(StatesGroup):
    WAITING_FOR_ADDRESS = State()
    WAITING_FOR_CONFIRMATION = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

@sync_to_async
def get_cart_items(user: TelegramUser) -> List[CartItem]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    cart, _ = Cart.objects.get_or_create(user=user, is_active=True)
    items = list(
        CartItem.objects.filter(cart=cart, is_active=True).select_related("product")
    )
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {len(items)} —à—Ç.")
    return items

@sync_to_async
def get_cart_total_price(user: TelegramUser) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã.
    """
    cart, _ = Cart.objects.get_or_create(user=user, is_active=True)
    total = sum(item.product.price * item.quantity for item in CartItem.objects.filter(cart=cart, is_active=True))
    logger.debug(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {total} ‚ÇΩ.")
    return total

async def get_cart_total(user: TelegramUser) -> int:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã.
    """
    return await get_cart_total_price(user)

async def get_cart_quantity(user: TelegramUser) -> int:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    items = await get_cart_items(user)
    return sum(item.quantity for item in items)

def cart_keyboard() -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã.
    """
    buttons = [
        [
            InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
            InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
        ],
        [
            InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu"),
            InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def cancel_keyboard() -> ReplyKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞–∑–∞–¥"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.callback_query(F.data == "cart")
async def show_cart(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    current_state = await state.get_state()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ—Ä–∑–∏–Ω—É. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    try:
        user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
            telegram_id=user_id,
            defaults={"first_name": callback.from_user.first_name, "is_active": True}
        )
        items = await get_cart_items(user)
        total = await get_cart_total(user)

        if not items:
            await callback.message.edit_text(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
                reply_markup=cart_keyboard()
            )
            await callback.answer()
            return

        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        for item in items:
            text += f"{item.product.name} √ó {item.quantity} - {item.product.price * item.quantity} ‚ÇΩ\n"
        text += f"\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"

        await callback.message.edit_text(
            text,
            reply_markup=cart_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")

    try:
        user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
            telegram_id=user_id,
            defaults={"first_name": callback.from_user.first_name, "is_active": True}
        )
        items = await get_cart_items(user)

        if not items:
            await callback.message.edit_text(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.",
                reply_markup=cart_keyboard()
            )
            await callback.answer()
            return

        await state.set_state(OrderStates.WAITING_FOR_ADDRESS)
        await callback.message.edit_text(
            "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=cancel_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)

@router.message(OrderStates.WAITING_FOR_ADDRESS, F.text == "–ù–∞–∑–∞–¥")
async def go_back_to_cart(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞.")

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∫–æ—Ä–∑–∏–Ω–µ.",
        reply_markup=ReplyKeyboardRemove()
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∞–¥—Ä–µ—Å–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–∑–∞–¥"
    await message.bot.delete_message(
        chat_id=message.chat.id,
        message_id=message.message_id - 1
    )  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∞–¥—Ä–µ—Å–∞
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–∑–∞–¥"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
        telegram_id=user_id,
        defaults={"first_name": message.from_user.first_name, "is_active": True}
    )
    items = await get_cart_items(user)
    total = await get_cart_total(user)

    if not items:
        await message.answer(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
            reply_markup=cart_keyboard()
        )
        return

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    for item in items:
        text += f"{item.product.name} √ó {item.quantity} - {item.product.price * item.quantity} ‚ÇΩ\n"
    text += f"\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"

    await message.answer(
        text,
        reply_markup=cart_keyboard()
    )

@router.message(OrderStates.WAITING_FOR_ADDRESS, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_order_at_address(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞.
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞.")

    await state.clear()
    await message.answer(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.bot.delete_message(
        chat_id=message.chat.id,
        message_id=message.message_id - 1
    )  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∞–¥—Ä–µ—Å–∞
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–º–µ–Ω–∞"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
        telegram_id=user_id,
        defaults={"first_name": message.from_user.first_name, "is_active": True}
    )
    items = await get_cart_items(user)
    total = await get_cart_total(user)

    if not items:
        await message.answer(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
            reply_markup=cart_keyboard()
        )
        return

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    for item in items:
        text += f"{item.product.name} √ó {item.quantity} - {item.product.price * item.quantity} ‚ÇΩ\n"
    text += f"\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"

    await message.answer(
        text,
        reply_markup=cart_keyboard()
    )

@router.message(OrderStates.WAITING_FOR_ADDRESS)
async def process_address(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    user_id = message.from_user.id
    address = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –∞–¥—Ä–µ—Å: {address}")

    try:
        user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
            telegram_id=user_id,
            defaults={"first_name": message.from_user.first_name, "is_active": True}
        )
        items = await get_cart_items(user)
        total = await get_cart_total(user)

        await state.update_data(address=address)
        await state.set_state(OrderStates.WAITING_FOR_CONFIRMATION)

        text = "üì¶ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
        for item in items:
            text += f"{item.product.name} √ó {item.quantity} - {item.product.price * item.quantity} ‚ÇΩ\n"
        text += f"\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ\n"
        text += f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n"
        text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"

        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_order"),
            ]
        ])

        await message.answer(
            text,
            reply_markup=confirm_keyboard
        )
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
        await message.bot.delete_message(
            chat_id=message.chat.id,
            message_id=message.message_id - 1
        )  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∞–¥—Ä–µ—Å–∞

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞")

@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑.")

    try:
        user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
            telegram_id=user_id,
            defaults={"first_name": callback.from_user.first_name, "is_active": True}
        )
        items = await get_cart_items(user)
        data = await state.get_data()
        address = data.get("address")

        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        order = await sync_to_async(Order.objects.create)(
            user=user,
            address=address,
            total_price=sum(item.product.price * item.quantity for item in items),
            status="pending"
        )
        for item in items:
            await sync_to_async(order.items.create)(
                product=item.product,
                quantity=item.quantity,
                price=item.product.price
            )
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await sync_to_async(CartItem.objects.filter(cart__user=user, is_active=True).delete)()

        await state.clear()
        await callback.message.edit_text(
            "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=cart_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)

@router.callback_query(F.data == "cancel_order")
async def cancel_order_at_confirmation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=cart_keyboard()
    )
    await callback.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
        telegram_id=user_id,
        defaults={"first_name": callback.from_user.first_name, "is_active": True}
    )
    items = await get_cart_items(user)
    total = await get_cart_total(user)

    if not items:
        await callback.message.edit_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
            reply_markup=cart_keyboard()
        )
        return

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    for item in items:
        text += f"{item.product.name} √ó {item.quantity} - {item.product.price * item.quantity} ‚ÇΩ\n"
    text += f"\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"

    await callback.message.edit_text(
        text,
        reply_markup=cart_keyboard()
    )

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    """
    –û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É –∫–æ—Ä–∑–∏–Ω—ã.")

    try:
        user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
            telegram_id=user_id,
            defaults={"first_name": callback.from_user.first_name, "is_active": True}
        )
        await sync_to_async(CartItem.objects.filter(cart__user=user, is_active=True).delete)()

        await callback.message.edit_text(
            "üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.",
            reply_markup=cart_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
