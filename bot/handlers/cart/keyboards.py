# bot/handlers/cart/keyboards.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.handlers.cart.models import get_cart_quantity, get_cart_total

def generate_cart_keyboard(user, items, cart_quantity: int, cart_total, page: int = 1, items_per_page: int = 5) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    if not items:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", callback_data="noop")
        ])
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ cart_total —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
        formatted_total = f"{int(cart_total)}" if cart_total == int(cart_total) else f"{cart_total:.2f}"
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_items = len(items)
        total_pages = max(1, (total_items + items_per_page - 1) // items_per_page)
        start_idx = (page - 1) * items_per_page
        end_idx = start_idx + items_per_page
        current_items = items[start_idx:end_idx]
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
        for item in current_items:
            product = item.product
            item_total = product.price * item.quantity
            formatted_item_total = f"{int(item_total)}" if item_total == int(item_total) else f"{item_total:.2f}"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{product.name} x{item.quantity} | {formatted_item_total} ‚ÇΩ",
                    callback_data="noop"
                )
            ])
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚àí", callback_data=f"decrease_item_{product.id}"),
                InlineKeyboardButton(text=f"{item.quantity}", callback_data="noop"),
                InlineKeyboardButton(text="+", callback_data=f"increase_item_{product.id}"),
                InlineKeyboardButton(text="‚ùå", callback_data=f"remove_item_{product.id}")
            ])
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        if total_pages > 1:
            pagination = []
            if page > 1:
                pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"cart_page_{page - 1}"))
            pagination.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"))
            if page < total_pages:
                pagination.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"cart_page_{page + 1}"))
            keyboard.inline_keyboard.append(pagination)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"–ò—Ç–æ–≥–æ: {formatted_total} ‚ÇΩ", callback_data="noop")
        ])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞ {formatted_total} ‚ÇΩ", callback_data="checkout")
        ])
        
        # –ö–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É" –∏ "–ù–∞–∑–∞–¥"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_cart"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        ])

    return keyboard
def generate_back_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def generate_skip_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
        ]
    ])

def generate_confirmation_keyboard(total):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ –Ω–∞ {total} ‚ÇΩ. –û—Ñ–æ—Ä–º–∏—Ç—å?", callback_data="confirm"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
        ]
    ])

def generate_edit_choice_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìç –ê–¥—Ä–µ—Å", callback_data="edit_address"),
            InlineKeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")
        ],
        [
            InlineKeyboardButton(text="üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è", callback_data="edit_wishes"),
            InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="edit_delivery_time")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_confirmation")
        ]
    ])
