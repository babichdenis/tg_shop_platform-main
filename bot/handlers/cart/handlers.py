# bot/handlers/cart/handlers.py
import os
import logging
import re
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.utils.text_decorations import html_decoration as html
from dotenv import load_dotenv

from .models import (
    get_or_create_user, get_cart, get_cart_items, update_cart_item_quantity,
    remove_item_from_cart, clear_cart, create_order, get_cart_details, get_order_details
)
from .keyboards import (
    generate_cart_keyboard, generate_back_keyboard, generate_skip_keyboard,
    generate_confirmation_keyboard, generate_edit_choice_keyboard
)
from .states import OrderState
from .utils import show_cart
from bot.core.config import SUPPORT_TELEGRAM, CART_ITEMS_PER_PAGE
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
SUPPORT_TELEGRAM = os.getenv("SUPPORT_TELEGRAM")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã ---
@router.callback_query(F.data == "cart")
@router.message(F.text == "/cart")
async def handle_cart(request: Message | CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã '–ö–æ—Ä–∑–∏–Ω–∞'."""
    user, _ = await get_or_create_user(request.from_user.id)
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user.telegram_id}")
    await state.update_data(cart_page=1)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é
    await show_cart(user, request, page=1)

@router.callback_query(F.data.startswith("increase_item_"))
async def increase_item(callback: CallbackQuery, state: FSMContext):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    user, _ = await get_or_create_user(callback.from_user.id)
    product_id = int(callback.data.split("_")[-1])
    
    await update_cart_item_quantity(user, product_id, 1)
    await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    page = data.get("cart_page", 1)
    await show_cart(user, callback, page=page)

@router.callback_query(F.data.startswith("decrease_item_"))
async def decrease_item(callback: CallbackQuery, state: FSMContext):
    """–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    user, _ = await get_or_create_user(callback.from_user.id)
    product_id = int(callback.data.split("_")[-1])
    
    await update_cart_item_quantity(user, product_id, -1)
    await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    page = data.get("cart_page", 1)
    await show_cart(user, callback, page=page)

@router.callback_query(F.data.startswith("remove_item_"))
async def remove_item(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    user, _ = await get_or_create_user(callback.from_user.id)
    product_id = int(callback.data.split("_")[-1])
    
    await remove_item_from_cart(user, product_id)
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    page = data.get("cart_page", 1)
    await show_cart(user, callback, page=page)

@router.callback_query(F.data.startswith("cart_page_"))
async def handle_cart_pagination(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    user, _ = await get_or_create_user(callback.from_user.id)
    page = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
    cart_items = await get_cart_items(user)
    cart_quantity = await get_cart_quantity(user)
    cart_total = await get_cart_total(user)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(cart_page=page)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = generate_cart_keyboard(
        user,
        cart_items,
        cart_quantity=cart_quantity,
        cart_total=cart_total,
        page=page,
        items_per_page=CAR–¢_ITEMS_PER_PAGE  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ bot/core/config.py
    )
    
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "clear_cart")
async def clear_cart_handler(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É."""
    user, _ = await get_or_create_user(callback.from_user.id)
    await clear_cart(user)
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é
    await state.update_data(cart_page=1)
    await show_cart(user, callback, page=1)

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    user, _ = await get_or_create_user(callback.from_user.id)
    cart_items = await get_cart_items(user)
    
    if not cart_items:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return

    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

    msg = await callback.message.answer(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=generate_back_keyboard()
    )

    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_address)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
@router.callback_query(F.data == "back", OrderState.waiting_for_address)
async def back_from_address(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ—Ä–∑–∏–Ω–µ –∏–∑ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞."""
    user, _ = await get_or_create_user(callback.from_user.id)
    data = await state.get_data()
    page = data.get("cart_page", 1)
    await state.clear()
    await show_cart(user, callback, page=page)

@router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å."""
    address = message.text.strip()
    if not address:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(address=address)
    
    data = await state.get_data()
    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=data.get("message_id"))
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞: {e}")

    msg = await message.answer(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=generate_back_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_phone)

@router.callback_query(F.data == "back", OrderState.waiting_for_phone)
async def back_from_phone(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞."""
    data = await state.get_data()
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞: {e}")

    msg = await callback.message.answer(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=generate_back_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_address)

@router.message(OrderState.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone = message.text.strip()
    if not re.match(r'^\+?\d{10,15}$', phone):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(phone=phone)
    
    data = await state.get_data()
    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=data.get("message_id"))
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")

    msg = await message.answer(
        "üí¨ –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=generate_skip_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_wishes)

@router.callback_query(F.data == "back", OrderState.waiting_for_wishes)
async def back_from_wishes(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    data = await state.get_data()
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")

    msg = await callback.message.answer(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=generate_back_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_phone)

@router.message(OrderState.waiting_for_wishes)
@router.callback_query(F.data == "skip", OrderState.waiting_for_wishes)
async def process_wishes(request: Message | CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É."""
    wishes = request.text.strip() if isinstance(request, Message) else None
    await state.update_data(wishes=wishes)
    
    data = await state.get_data()
    try:
        if isinstance(request, Message):
            await request.bot.delete_message(chat_id=request.chat.id, message_id=data.get("message_id"))
        else:
            await request.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π: {e}")

    msg = await (request.message if isinstance(request, CallbackQuery) else request).answer(
        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=generate_skip_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_delivery_time)

@router.callback_query(F.data == "back", OrderState.waiting_for_delivery_time)
async def back_from_delivery_time(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –ø–æ–∂–µ–ª–∞–Ω–∏–π."""
    data = await state.get_data()
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤–≤–æ–¥—É –ø–æ–∂–µ–ª–∞–Ω–∏–π: {e}")

    msg = await callback.message.answer(
        "üí¨ –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=generate_skip_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_wishes)

@router.message(OrderState.waiting_for_delivery_time)
@router.callback_query(F.data == "skip", OrderState.waiting_for_delivery_time)
async def process_delivery_time(request: Message | CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏."""
    delivery_time = request.text.strip() if isinstance(request, Message) else None
    await state.update_data(desired_delivery_time=delivery_time)
    
    data = await state.get_data()
    user, _ = await get_or_create_user(request.from_user.id)
    cart = await get_cart(user)
    items_text, total, first_item_photo = await get_cart_details(cart.id)

    text = (
        f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
        f"üìç –ê–¥—Ä–µ—Å: {html.quote(data.get('address'))}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {html.quote(data.get('phone'))}\n"
        f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {html.quote(data.get('wishes')) if data.get('wishes') else '–ù–µ—Ç'}\n"
        f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {html.quote(delivery_time) if delivery_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n\n"
        f"üíµ –ò—Ç–æ–≥–æ: {html.bold(f'{total} ‚ÇΩ')}\n\n"
    )

    try:
        if isinstance(request, Message):
            await request.bot.delete_message(chat_id=request.chat.id, message_id=data.get("message_id"))
        else:
            await request.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")

    msg = await (request.message if isinstance(request, CallbackQuery) else request).answer(
        text,
        reply_markup=generate_confirmation_keyboard(total),
        parse_mode=ParseMode.HTML
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_confirmation)

@router.callback_query(F.data == "back", OrderState.waiting_for_confirmation)
async def back_from_confirmation(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    data = await state.get_data()
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")

    msg = await callback.message.answer(
        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=generate_skip_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_delivery_time)

@router.callback_query(F.data == "confirm", OrderState.waiting_for_confirmation)
async def confirm_order(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."""
    data = await state.get_data()
    user, _ = await get_or_create_user(callback.from_user.id)

    try:
        order = await create_order(
            user_id=user.telegram_id,
            address=data.get("address"),
            phone=data.get("phone"),
            wishes=data.get("wishes"),
            desired_delivery_time=data.get("desired_delivery_time")
        )

        items_text, total = await get_order_details(order.id)

        user_text = (
            f"‚úÖ –ó–∞–∫–∞–∑ {html.bold(f'#{order.id}')} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üìç –ê–¥—Ä–µ—Å: {html.quote(data.get('address'))}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {html.quote(data.get('phone'))}\n"
            f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {html.quote(data.get('wishes')) if data.get('wishes') else '–ù–µ—Ç'}\n"
            f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {html.quote(data.get('desired_delivery_time')) if data.get('desired_delivery_time') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n\n"
            f"üíµ –ò—Ç–æ–≥–æ: {html.bold(f'{total} ‚ÇΩ')}"
        )

        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

        await callback.message.answer(
            user_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode=ParseMode.HTML
        )

        if SUPPORT_TELEGRAM and SUPPORT_TELEGRAM.strip():
            admin_text = (
                f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
                f"üìç –ê–¥—Ä–µ—Å: {data.get('address')}\n"
                f"üõí –¢–æ–≤–∞—Ä—ã:\n{items_text}\n"
                f"üíµ –°—É–º–º–∞: {total}‚ÇΩ"
            )
            try:
                await bot.send_message(
                    chat_id=int(SUPPORT_TELEGRAM),
                    text=admin_text,
                    parse_mode=ParseMode.HTML
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        else:
            logger.warning("SUPPORT_TELEGRAM –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    
    await state.clear()

@router.callback_query(F.data == "edit", OrderState.waiting_for_confirmation)
async def edit_order(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ '–ò–∑–º–µ–Ω–∏—Ç—å'."""
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

    msg = await callback.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=generate_edit_choice_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_edit_choice)

@router.callback_query(F.data == "back_to_confirmation", OrderState.waiting_for_edit_choice)
async def back_to_confirmation(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞."""
    data = await state.get_data()
    user, _ = await get_or_create_user(callback.from_user.id)
    cart = await get_cart(user)
    items_text, total, _ = await get_cart_details(cart.id)

    text = (
        f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
        f"üìç –ê–¥—Ä–µ—Å: {html.quote(data.get('address'))}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {html.quote(data.get('phone'))}\n"
        f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {html.quote(data.get('wishes')) if data.get('wishes') else '–ù–µ—Ç'}\n"
        f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {html.quote(data.get('desired_delivery_time')) if data.get('desired_delivery_time') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n\n"
        f"üíµ –ò—Ç–æ–≥–æ: {html.bold(f'{total} ‚ÇΩ')}\n\n"
    )

    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞: {e}")

    msg = await callback.message.answer(
        text,
        reply_markup=generate_confirmation_keyboard(total),
        parse_mode=ParseMode.HTML
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_confirmation)

@router.callback_query(F.data == "edit_address", OrderState.waiting_for_edit_choice)
async def edit_address(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å."""
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")

    msg = await callback.message.answer(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=generate_back_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_address)

@router.callback_query(F.data == "edit_phone", OrderState.waiting_for_edit_choice)
async def edit_phone(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")

    msg = await callback.message.answer(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=generate_back_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_phone)

@router.callback_query(F.data == "edit_wishes", OrderState.waiting_for_edit_choice)
async def edit_wishes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è."""
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π: {e}")

    msg = await callback.message.answer(
        "üí¨ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=generate_skip_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_wishes)

@router.callback_query(F.data == "edit_delivery_time", OrderState.waiting_for_edit_choice)
async def edit_delivery_time(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏."""
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")

    msg = await callback.message.answer(
        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=generate_skip_keyboard()
    )
    await state.update_data(message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_delivery_time)
