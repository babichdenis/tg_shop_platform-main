# File: bot/handlers/catalog/views.py
import logging
from typing import Tuple, List
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from asgiref.sync import sync_to_async
from django_app.shop.models import Category, Product, TelegramUser
from bot.handlers.cart.models import get_cart_quantity, get_cart_total
from bot.core.config import CATEGORIES_PER_PAGE, PRODUCTS_PER_PAGE, SUBSCRIPTION_CHANNEL_ID, SUBSCRIPTION_GROUP_ID
from bot.core.utils import get_or_create_user
from .keyboards import build_categories_keyboard, build_products_keyboard
from bot.handlers.start.subscriptions import check_subscriptions

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_category_path(category_id: str) -> str:  # –£–±–∏—Ä–∞–µ–º @sync_to_async
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π (breadcrumb) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    :param category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ "root".
    :return: –°—Ç—Ä–æ–∫–∞ —Å –ø—É—Ç—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∞—Ç–∞–ª–æ–≥ > –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ > –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã").
    """
    if category_id == "root":
        return "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥"

    path = []
    current_category = Category.objects.get(id=category_id)
    while current_category:
        path.append(current_category.name)
        current_category = current_category.parent
    path.reverse()
    return "üõçÔ∏è " + " > ".join(path)


@sync_to_async
def get_categories(parent_id: str, page: int) -> Tuple[str, List[Category], int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    :param parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ("root" –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π).
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :return: –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü).
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: parent_id={parent_id}, page={page}")

    if parent_id == "root":
        categories = Category.objects.filter(parent__isnull=True, is_active=True)
    else:
        categories = Category.objects.filter(parent_id=parent_id, is_active=True)

    total_categories = categories.count()
    total_pages = max(1, (total_categories + CATEGORIES_PER_PAGE - 1) // CATEGORIES_PER_PAGE)
    page = max(1, min(page, total_pages))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    start = (page - 1) * CATEGORIES_PER_PAGE
    end = start + CATEGORIES_PER_PAGE
    categories_on_page = list(categories[start:end])

    if not categories_on_page:
        breadcrumb = get_category_path(parent_id)  # –í—ã–∑–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
        return f"{breadcrumb}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", [], 0

    breadcrumb = get_category_path(parent_id)  # –í—ã–∑–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    text = f"{breadcrumb}\n\n–í—ã–±–µ—Ä–∏—Ç–µ {'–∫–∞—Ç–µ–≥–æ—Ä–∏—é' if parent_id == 'root' else '–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é'}:"
    return text, categories_on_page, total_pages


@sync_to_async
def get_products_page(category_id: int, page: int, per_page: int = PRODUCTS_PER_PAGE) -> Tuple[List[Product], int]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    :param category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :param per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    :return: –ö–æ—Ä—Ç–µ–∂ (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤).
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤: category_id={category_id}, page={page}")
    qs = Product.objects.filter(category_id=category_id, is_active=True)
    total_count = qs.count()
    start = (page - 1) * per_page
    end = start + per_page
    products = list(qs[start:end])
    return products, total_count


async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param callback: CallbackQuery –æ–±—ä–µ–∫—Ç.
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    """
    try:
        await callback.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {text[:50]}...")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (—É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ): {text[:50]}...")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                await callback.message.delete()
                await callback.message.answer(
                    text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            except Exception as delete_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")
                await callback.message.answer(
                    text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await callback.message.delete()
            await callback.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except Exception as delete_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")
            await callback.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.message(F.text == "/catalog")
async def catalog_command(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞.
    """
    try:
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /catalog.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if SUBSCRIPTION_CHANNEL_ID or SUBSCRIPTION_GROUP_ID:
            subscription_result, message_text = await check_subscriptions(message.bot, user_id, "/catalog")
            if not subscription_result:
                await message.answer(
                    message_text,
                    disable_web_page_preview=True,
                    parse_mode="Markdown"
                )
                return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        text, categories, total_pages = await get_categories("root", 1)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, _ = await get_or_create_user(
            user_id=user_id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username,
            language_code=message.from_user.language_code
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = await build_categories_keyboard(categories, "root", 1, total_pages, user)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /catalog: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")


@router.callback_query(F.data.startswith("cat_page_"))
async def categories_pagination(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data (—Ñ–æ—Ä–º–∞—Ç: "cat_page_<parent_id>_<page>")
        parts = callback.data.split("_")
        if len(parts) != 4:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")

        parent_id = parts[2]  # –ù–∞–ø—Ä–∏–º–µ—Ä, "root" –∏–ª–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        page = int(parts[3])
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, parent_id={parent_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        text, categories, total_pages = await get_categories(parent_id, page)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, _ = await get_or_create_user(
            user_id=user_id,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name,
            username=callback.from_user.username,
            language_code=callback.from_user.language_code
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if parent_id != "root":
            _, subcategories, _ = await get_categories(parent_id, 1)
            if not subcategories:
                # –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                products, total_count = await get_products_page(int(parent_id), page)
                if products:
                    breadcrumb = await sync_to_async(get_category_path)(parent_id)  # –î–æ–±–∞–≤–ª—è–µ–º sync_to_async
                    kb = await build_products_keyboard(int(parent_id), page, products, total_count, user)
                    await safe_edit_message(callback, f"{breadcrumb}\n\nüõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", kb)
                    await callback.answer()
                    return
                else:
                    text = f"{breadcrumb}\n\n–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = await build_categories_keyboard(categories, parent_id, page, total_pages, user)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_edit_message(callback, text, keyboard)

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("prod_page_"))
async def products_pagination(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    try:
        parts = callback.data.split("_")
        if len(parts) != 4:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")

        category_id = int(parts[2])
        page = int(parts[3])
        logger.info(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è category_id {category_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, _ = await get_or_create_user(
            user_id=callback.from_user.id,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name,
            username=callback.from_user.username,
            language_code=callback.from_user.language_code
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        products, total_count = await get_products_page(category_id, page)

        if not products:
            logger.warning(f"–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID {category_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")
            breadcrumb = await sync_to_async(get_category_path)(str(category_id))  # –î–æ–±–∞–≤–ª—è–µ–º sync_to_async
            await safe_edit_message(callback, f"{breadcrumb}\n\n–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", None)
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        breadcrumb = await sync_to_async(get_category_path)(str(category_id))  # –î–æ–±–∞–≤–ª—è–µ–º sync_to_async
        kb = await build_products_keyboard(category_id, page, products, total_count, user)
        await safe_edit_message(callback, f"{breadcrumb}\n\nüõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", kb)

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
    finally:
        await callback.answer()


@router.callback_query(F.data == "catalog")
async def catalog_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ö–∞—Ç–∞–ª–æ–≥'.
    """
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ö–∞—Ç–∞–ª–æ–≥'.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if SUBSCRIPTION_CHANNEL_ID or SUBSCRIPTION_GROUP_ID:
            subscription_result, message_text = await check_subscriptions(callback.bot, user_id, "catalog")
            if not subscription_result:
                try:
                    await callback.message.edit_text(
                        message_text,
                        disable_web_page_preview=True,
                        parse_mode="Markdown"
                    )
                except TelegramBadRequest:
                    await callback.message.answer(
                        message_text,
                        disable_web_page_preview=True,
                        parse_mode="Markdown"
                    )
                await callback.answer()
                return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        text, categories, total_pages = await get_categories("root", 1)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, _ = await get_or_create_user(
            user_id=user_id,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name,
            username=callback.from_user.username,
            language_code=callback.from_user.language_code
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = await build_categories_keyboard(categories, "root", 1, total_pages, user)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_edit_message(callback, text, keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ callback 'catalog': {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞", show_alert=True)
    finally:
        await callback.answer()
