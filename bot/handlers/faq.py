# bot/handlers/faq.py

import os
import django
import logging
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from asgiref.sync import sync_to_async
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold, hunderline
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest

from django_app.shop.models import FAQ
from dotenv import load_dotenv


load_dotenv() 

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

ITEMS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
SEARCH_RESULTS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞


class FAQStates(StatesGroup):
    browsing = State()
    waiting_question = State()
    viewing_item = State()
    searching = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_app.config.settings")
django.setup()
logger.info("Django —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ FAQ.")


@sync_to_async
def get_faq_page(page: int = 1):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ FAQ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    faq_page = list(FAQ.objects.all()[(page - 1) * ITEMS_PER_PAGE: page * ITEMS_PER_PAGE])
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(faq_page)} FAQ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}.")
    return faq_page


@sync_to_async
def get_faq_count():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ FAQ.
    """
    count = FAQ.objects.count()
    logger.debug(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ FAQ: {count}.")
    return count


@sync_to_async
def get_faq_item(item_id: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ FAQ –ø–æ –µ–≥–æ ID.
    """
    try:
        faq_item = FAQ.objects.get(id=item_id)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω FAQ —Å ID {item_id}: {faq_item.question}")
        return faq_item
    except FAQ.DoesNotExist:
        logger.warning(f"FAQ —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None


@sync_to_async
def search_faq(query: str, page: int = 1):
    """
    –ü–æ–∏—Å–∫ FAQ –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞.
    """
    logger.debug(f"–ü–æ–∏—Å–∫ FAQ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}', —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")
    start = (page - 1) * SEARCH_RESULTS_PER_PAGE
    end = start + SEARCH_RESULTS_PER_PAGE

    q_lower = query.lower()
    q_capital = q_lower.capitalize()

    qs_lower = FAQ.objects.filter(question__icontains=q_lower)
    qs_capital = FAQ.objects.filter(question__icontains=q_capital)

    combined = (qs_lower | qs_capital).distinct()
    results = list(combined[start:end])
    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}.")
    return results


@sync_to_async
def get_search_count(query: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'.")
    q_lower = query.lower()
    q_capital = q_lower.capitalize()

    qs_lower = FAQ.objects.filter(question__icontains=q_lower)
    qs_capital = FAQ.objects.filter(question__icontains=q_capital)

    combined = (qs_lower | qs_capital).distinct()
    count = combined.count()
    logger.debug(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}': {count}.")
    return count


def build_faq_keyboard(faq_items, page: int, total_pages: int):
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ FAQ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    logger.debug(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è FAQ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} –∏–∑ {total_pages}.")
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
    number_buttons = [
        InlineKeyboardButton(text=str(i + 1), callback_data=f"faq_item_{item.id}")
        for i, item in enumerate(faq_items)
    ]
    if number_buttons:
        buttons.append(number_buttons)
        logger.debug("–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ FAQ.")

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_buttons = []
    if total_pages > 1:
        if page > 1:
            pagination_buttons.append(InlineKeyboardButton(text="‚Üê", callback_data=f"faq_page_{page - 1}"))
        pagination_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            pagination_buttons.append(InlineKeyboardButton(text="‚Üí", callback_data=f"faq_page_{page + 1}"))
        buttons.append(pagination_buttons)
        logger.debug("–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ FAQ.")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    buttons.append([InlineKeyboardButton(text="üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")])
    buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def build_search_keyboard(results, page: int, total_pages: int, query: str):
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ FAQ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    logger.debug(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ FAQ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}', —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}.")
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–∏–Ω —Ä—è–¥
    number_buttons = [
        InlineKeyboardButton(text=str(i + 1), callback_data=f"faq_item_{item.id}")
        for i, item in enumerate(results)
    ]
    if number_buttons:
        buttons.append(number_buttons)
        logger.debug("–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö FAQ.")

    # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback_data
    encoded_query = query.replace("_", "##")

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_buttons = []
    if total_pages > 1:
        if page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚Üê",
                    callback_data=f"search_page_{page - 1}_{encoded_query}"
                )
            )
        pagination_buttons.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
        )
        if page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚Üí",
                    callback_data=f"search_page_{page + 1}_{encoded_query}"
                )
            )
        buttons.append(pagination_buttons)
        logger.debug("–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ FAQ.")

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ FAQ", callback_data="faq")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def back_to_list_keyboard(page: int):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É FAQ.
    """
    logger.debug(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É FAQ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"faq_page_{page}")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])


async def edit_or_resend_message(callback: CallbackQuery, text: str, markup: InlineKeyboardMarkup):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        await callback.message.edit_caption(caption=text, reply_markup=markup)
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.")
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é: {e}")
        try:
            await callback.message.edit_text(text=text, reply_markup=markup)
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º.")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e).lower():
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ: {e}")
                await callback.message.delete()
                await callback.message.answer(text=text, reply_markup=markup)
                logger.info("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ.")


@router.callback_query(F.data == "faq")
async def show_faq(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ FAQ.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª FAQ.")
    await state.set_state(FAQStates.browsing)
    await state.update_data(current_page=1)
    await show_faq_page(callback, 1)


async def show_faq_page(callback: CallbackQuery, page: int):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã FAQ.
    """
    logger.debug(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã FAQ {page}.")
    faq_items = await get_faq_page(page)
    total_count = await get_faq_count()
    total_pages = max(1, (total_count - 1) // ITEMS_PER_PAGE + 1)
    page = max(1, min(page, total_pages))

    text = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    if faq_items:
        text += "\n".join(
            f"{i + 1}. {item.question}"
            for i, item in enumerate(faq_items)
        )
    else:
        text = "‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤\n"

    if faq_items:
        markup = build_faq_keyboard(faq_items, page, total_pages)
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        logger.debug("FAQ –ø—É—Å—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    await edit_or_resend_message(callback, text, markup)
    await callback.answer()
    logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ FAQ {page} –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞.")


@router.callback_query(F.data.startswith("faq_page_"))
async def faq_pagination(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ FAQ.
    """
    try:
        page = int(callback.data.split("_")[-1])
        logger.debug(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è FAQ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}.")
    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ FAQ: {callback.data} - {e}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
        return

    await state.update_data(current_page=page)
    await show_faq_page(callback, page)


@router.callback_query(F.data.startswith("faq_item_"))
async def show_faq_item(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ FAQ.
    """
    try:
        item_id = int(callback.data.split("_")[-1])
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ FAQ —Å ID {item_id}.")
    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è FAQ: {callback.data} - {e}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è FAQ.", show_alert=True)
        return

    faq_item = await get_faq_item(item_id)

    if not faq_item:
        logger.warning(f"FAQ —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    data = await state.get_data()
    current_page = data.get('current_page', 1)

    text = (
        f"{hunderline('–í–æ–ø—Ä–æ—Å:')}\n{faq_item.question}\n\n"
        f"{hunderline('–û—Ç–≤–µ—Ç:')}\n{faq_item.answer}"
    )

    await edit_or_resend_message(callback, text, back_to_list_keyboard(current_page))
    await callback.answer()
    logger.info(f"FAQ —Å ID {item_id} –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}.")


@router.callback_query(F.data == "ask_question")
async def ask_question_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞—á—É –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á—É –≤–æ–ø—Ä–æ—Å–∞.")
    await state.set_state(FAQStates.waiting_question)
    await edit_or_resend_message(
        callback,
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º:",
        InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="faq")]
        ])
    )
    await callback.answer()


@router.message(F.text, StateFilter(FAQStates.waiting_question))
async def process_question(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∏—Å–∫—É.
    """
    query = message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: '{query}'.")
    await state.set_state(FAQStates.searching)
    await state.update_data(search_query=query, search_page=1)
    await show_search_results(message, state, query, 1)


async def show_search_results(message: Message, state: FSMContext, query: str, page: int):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ FAQ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.debug(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}', —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")
    await state.update_data(search_query=query, search_page=page)

    decoded_query = query.replace("##", "_")
    results = await search_faq(decoded_query, page)
    total_count = await get_search_count(decoded_query)
    total_pages = max(1, (total_count - 1) // SEARCH_RESULTS_PER_PAGE + 1)
    page = max(1, min(page, total_pages))

    text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{decoded_query}':\n\n"
    if results:
        text += "\n".join(f"{i + 1}. {item.question}" for i, item in enumerate(results))
        markup = build_search_keyboard(results, page, total_pages, decoded_query)
    else:
        text += "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é {SUPPORT_TELEGRAM}"
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ FAQ", callback_data="faq")]
        ])
        logger.debug("–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ FAQ.")

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id - 1,
            text=text,
            reply_markup=markup
        )
        await message.delete()
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞: {e}")
        if "message to edit not found" in str(e).lower():
            new_msg = await message.answer(text, reply_markup=markup)
            await state.update_data(search_message_id=new_msg.message_id)
            logger.info("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            await message.answer(text, reply_markup=markup)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–Ω–æ–≤–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")


@router.callback_query(F.data.startswith("search_page_"))
async def search_pagination(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ FAQ.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞.")
    try:
        parts = callback.data.split("_")
        if len(parts) < 4:
            raise ValueError("Invalid callback data format")

        page = int(parts[2])
        query = "_".join(parts[3:]).replace("##", "_")
        logger.debug(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ FAQ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'.")
    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ FAQ: {callback.data} - {e}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞.", show_alert=True)
        return

    await show_search_results(callback.message, state, query, page)
    await callback.answer()
    logger.info(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ FAQ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
