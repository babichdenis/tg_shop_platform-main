import os
import django
import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from asgiref.sync import sync_to_async

from django_app.shop.models import TelegramUser, Cart, Order, Category, Product
from bot.handlers.cart import get_cart_total, get_cart_quantity  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ cart.py

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ
ITEMS_PER_PAGE = 10

def register_start_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
    """
    dp.include_router(router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.")

@sync_to_async(thread_sensitive=True)
def get_or_create_user(user_id: int, **kwargs) -> tuple[TelegramUser, bool]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    user, created = TelegramUser.objects.get_or_create(
        telegram_id=user_id,
        defaults={
            'first_name': kwargs.get('first_name'),
            'last_name': kwargs.get('last_name'),
            'username': kwargs.get('username'),
            'language_code': kwargs.get('language_code'),
            'is_active': True
        }
    )
    if created:
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
    else:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user}")
    return user, created

@sync_to_async
def get_user_info(user: TelegramUser) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user.telegram_id}")
    info = (
        f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"Username: @{user.username if user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–Ø–∑—ã–∫: {user.language_code or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"ID: {user.telegram_id}"
    )
    return info

@sync_to_async
def get_user_orders(user: TelegramUser, limit: int = 5) -> list[Order]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    orders = list(Order.objects.filter(
        user=user,
        is_active=True
    ).order_by('-created_at')[:limit])
    return orders

@sync_to_async
def get_pending_orders(user: TelegramUser) -> list[Order]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã (—Å—Ç–∞—Ç—É—Å != '–î–æ—Å—Ç–∞–≤–ª–µ–Ω').
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    pending_orders = list(Order.objects.filter(
        user=user,
        is_active=True,
        status__in=['–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', '–û–ø–ª–∞—á–µ–Ω', '–í –¥–æ—Å—Ç–∞–≤–∫–µ']
    ).order_by('-created_at'))
    return pending_orders

@sync_to_async
def get_price_list(page: int) -> tuple[str, int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
    categories = Category.objects.filter(is_active=True).prefetch_related('products')
    products = Product.objects.filter(is_active=True).order_by('category__name', 'name')
    total_products = products.count()
    total_pages = (total_products + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    products_on_page = products[start:end]

    text = "üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç\n\n"
    current_category = None
    for product in products_on_page:
        if product.category != current_category:
            current_category = product.category
            text += f"**{current_category.name}**\n"
        text += f"‚Ä¢ {product.name} ‚Äî {product.price} ‚ÇΩ\n"
    if not products_on_page:
        text += "–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n"
    return text, total_pages

async def format_user_profile(user: TelegramUser) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_info = await get_user_info(user)
    orders = await get_user_orders(user, limit=5)
    pending_orders = await get_pending_orders(user)

    text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n{user_info}\n\n"
    if pending_orders:
        text += "üì¨ –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã (–Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã):\n\n"
        for order in pending_orders:
            text += (
                f"–ó–∞–∫–∞–∑ #{order.id} –æ—Ç {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
                f"–°—É–º–º–∞: {order.total} ‚ÇΩ\n"
                f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                f"–ê–¥—Ä–µ—Å: {order.address}\n\n"
            )
    else:
        text += "üì¨ –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n"

    if not orders:
        text += "üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–≥–ª—è–Ω–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üõçÔ∏è"
    else:
        text += "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            text += (
                f"–ó–∞–∫–∞–∑ #{order.id} –æ—Ç {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
                f"–°—É–º–º–∞: {order.total} ‚ÇΩ\n"
                f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                f"–ê–¥—Ä–µ—Å: {order.address}\n\n"
            )
    return text

async def profile_keyboard(user: TelegramUser) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è.")
    cart_quantity = await get_cart_quantity(user)
    cart_total = await get_cart_total(user)
    pending_orders = await get_pending_orders(user)

    buttons = []
    for order in pending_orders:
        try:
            if not order.is_paid and order.status != "–î–æ—Å—Ç–∞–≤–ª–µ–Ω":
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ #{order.id} ({order.total} ‚ÇΩ)",
                        callback_data=f"pay_order_{order.id}"
                    )
                ])
        except AttributeError:
            if order.status != "–î–æ—Å—Ç–∞–≤–ª–µ–Ω":
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ #{order.id} ({order.total} ‚ÇΩ)",
                        callback_data=f"pay_order_{order.id}"
                    )
                ])

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥: –ö–∞—Ç–∞–ª–æ–≥ –∏ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å")
    buttons.append([
        InlineKeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="cat_page_root_1"),
        InlineKeyboardButton(text="üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list_1")
    ])

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥: FAQ
    buttons.append([InlineKeyboardButton(text="‚ùì FAQ", callback_data="faq")])

    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥: –ö–æ—Ä–∑–∏–Ω–∞ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–∞)
    cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞: {cart_total} ‚ÇΩ ({cart_quantity} —à—Ç.)" if cart_quantity > 0 else "üõí –ö–æ—Ä–∑–∏–Ω–∞: –ø—É—Å—Ç–∞"
    buttons.append([InlineKeyboardButton(text=cart_text, callback_data="cart")])

    # –ß–µ—Ç–≤—ë—Ä—Ç—ã–π —Ä—è–¥: –ù–∞–∑–∞–¥ –∏ –í –º–µ–Ω—é
    buttons.append([
        InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu"),
        InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def main_menu_keyboard(user: TelegramUser) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é.")
    cart_quantity = await get_cart_quantity(user)
    cart_total = await get_cart_total(user)

    buttons = [
        [
            InlineKeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="cat_page_root_1"),
            InlineKeyboardButton(text="üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list_1")
        ],
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="‚ùì FAQ", callback_data="faq")
        ]
    ]

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
    cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞: {cart_total} ‚ÇΩ ({cart_quantity} —à—Ç.)" if cart_quantity > 0 else "üõí –ö–æ—Ä–∑–∏–Ω–∞: –ø—É—Å—Ç–∞"
    buttons.append([InlineKeyboardButton(text=cart_text, callback_data="cart")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def welcome_message(user_name: str, has_cart: bool = False) -> str:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    message = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n"
        "–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ! üõçÔ∏è\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:\n\n"
        "üîπ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à –ö–∞—Ç–∞–ª–æ–≥ —Å —Ç–æ–≤–∞—Ä–∞–º–∏\n"
        "üîπ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º\n"
        "üîπ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ü—Ä–æ—Ñ–∏–ª—å\n"
        "üîπ –ù–∞–π–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–∑–¥–µ–ª–µ FAQ\n"
        "üîπ –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ö–æ—Ä–∑–∏–Ω—É\n"
    )
    logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.")
    return message

@sync_to_async
def has_orders_or_cart(user: TelegramUser) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞.
    """
    has_cart = Cart.objects.filter(user=user, is_active=True).exists()
    has_orders = Order.objects.filter(user=user, is_active=True).exists()
    return has_cart or has_orders

@router.message(F.text == "/start")
async def start_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    bot = message.bot
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    user_data = message.from_user
    user, _ = await get_or_create_user(
        user_id=user_data.id,
        first_name=user_data.first_name,
        last_name=user_data.last_name,
        username=user_data.username,
        language_code=user_data.language_code
    )
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

    has_cart = await get_cart_quantity(user) > 0
    await message.answer(
        welcome_message(message.from_user.first_name, has_cart),
        reply_markup=await main_menu_keyboard(user)
    )

@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    try:
        user, _ = await get_or_create_user(
            user_id=callback.from_user.id,
            first_name=callback.from_user.first_name
        )
        menu_text = welcome_message(callback.from_user.first_name, await get_cart_quantity(user) > 0)
        menu_markup = await main_menu_keyboard(user)
        await callback.message.answer(text=menu_text, reply_markup=menu_markup)
        try:
            await callback.message.delete()
        except:
            pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await callback.answer()

@router.callback_query(F.data == "cart_total")
async def show_cart_total(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã".
    """
    user_id = callback.from_user.id
    user, _ = await get_or_create_user(user_id=user_id, first_name=callback.from_user.first_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã.")

    cart_total = await get_cart_total(user)
    cart_quantity = await get_cart_quantity(user)
    await callback.answer(f"–°—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã: {cart_total} ‚ÇΩ ({cart_quantity} —à—Ç.)", show_alert=True)

    has_cart = cart_quantity > 0
    try:
        await callback.message.edit_text(
            welcome_message(callback.from_user.first_name, has_cart),
            reply_markup=await main_menu_keyboard(user)
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.answer(
                welcome_message(callback.from_user.first_name, has_cart),
                reply_markup=await main_menu_keyboard(user)
            )

@router.callback_query(F.data == "profile")
@router.message(F.text == "/profile")
async def show_profile(request: Message | CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" –∏ –∫–æ–º–∞–Ω–¥—ã /profile.
    """
    user_id = request.from_user.id
    user, _ = await get_or_create_user(user_id=user_id, first_name=request.from_user.first_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å.")

    text = await format_user_profile(user)
    keyboard = await profile_keyboard(user)

    try:
        if isinstance(request, Message):
            await request.answer(text, reply_markup=keyboard)
        else:
            await request.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if isinstance(request, Message):
                await request.answer(text, reply_markup=keyboard)
            else:
                await request.message.answer(text, reply_markup=keyboard)
    if isinstance(request, CallbackQuery):
        await request.answer()

@router.callback_query(F.data.startswith("pay_order_"))
async def handle_payment(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑".
    """
    order_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    user, _ = await get_or_create_user(user_id=user_id, first_name=callback.from_user.first_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ #{order_id}.")

    try:
        order = await sync_to_async(Order.objects.get)(id=order_id, user=user)
        try:
            if order.is_paid:
                await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!", show_alert=True)
                return
        except AttributeError:
            pass  # –ï—Å–ª–∏ –ø–æ–ª–µ is_paid –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É

        if order.status == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω":
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!", show_alert=True)
            return

        payment_link = f"https://example.com/pay/{order_id}"
        await callback.message.answer(
            f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–∞ —Å—É–º–º—É {order.total} ‚ÇΩ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_link}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                 InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        try:
            await callback.message.delete()
        except:
            pass
    except Order.DoesNotExist:
        logger.error(f"–ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ #{order_id}: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã", show_alert=True)
    finally:
        await callback.answer()

@router.callback_query(F.data.startswith("price_list_"))
async def show_price_list(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç".
    """
    page = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")

    try:
        price_list_text, total_pages = await get_price_list(page)
        user, _ = await get_or_create_user(user_id=user_id, first_name=callback.from_user.first_name)
        cart_quantity = await get_cart_quantity(user)
        cart_total = await get_cart_total(user)

        buttons = []
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        if total_pages > 1:
            pagination_buttons = []
            if page > 1:
                pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"price_list_{page - 1}"))
            pagination_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"))
            if page < total_pages:
                pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"price_list_{page + 1}"))
            buttons.append(pagination_buttons)

        # –í—Ç–æ—Ä–æ–π —Ä—è–¥: –¢–æ–ª—å–∫–æ –ö–∞—Ç–∞–ª–æ–≥ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç")
        buttons.append([InlineKeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="cat_page_root_1")])

        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥: –ö–æ—Ä–∑–∏–Ω–∞ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–∞)
        cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞: {cart_total} ‚ÇΩ ({cart_quantity} —à—Ç.)" if cart_quantity > 0 else "üõí –ö–æ—Ä–∑–∏–Ω–∞: –ø—É—Å—Ç–∞"
        buttons.append([InlineKeyboardButton(text=cart_text, callback_data="cart")])

        # –ß–µ—Ç–≤—ë—Ä—Ç—ã–π —Ä—è–¥: –ù–∞–∑–∞–¥ –∏ –í –º–µ–Ω—é
        buttons.append([
            InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu"),
            InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(price_list_text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞", show_alert=True)
    finally:
        await callback.answer()
